#!/usr/bin/env node

'use strict';

const Bluebird     = require('bluebird');
const nano         = require('nano')('http://localhost:5984');
const orientServer = require('../lib/orient');

Bluebird.promisifyAll(nano.db);

function initDatabases() {
  const chaptersdb   = orientServer.use('chapters');

  return chaptersdb
    .class
    .create('Chapter', 'V')
    .tap(function () {
      console.log('Added vertex class \'Chapter\'');
    })

    .return(chaptersdb.class.create('Persona', 'Chapter'))
    .tap(function () {
      console.log('Added vertex class \'Persona\'');
    })

    .return(chaptersdb.class.create('Identity', 'V'))
    .tap(function () {
      console.log('Added vertex class \'Identity\'');
    })

    .return(chaptersdb.class.create('Wrote', 'E'))
    .tap(function () {
      console.log('Added edge class \'Wrote\'');
    })

    .return(chaptersdb.class.create('Owns', 'E'))
    .tap(function () {
      console.log('Added edge class \'Owns\'');
    })

    .catch(function (e) {
      console.error(e);
    });
}

function createClassProps() {
  const chaptersdb = orientServer.use('chapters');

  return chaptersdb
    .class
    .get('Chapter')
    .get('property')
    .call('create', [
      {
        name: 'title',
        type: 'string'
      },
      {
        name: 'description',
        type: 'string'
      },
      {
        name: 'markdown',
        type: 'string'
      },
      {
        name: 'ordered',
        type: 'linklist'
      },
      {
        name: 'unordered',
        type: 'linklist'
      },
      {
        name: 'public',
        type: 'boolean'
      },
      {
        name: 'read',
        type: 'linklist'
      },
      {
        name: 'write',
        type: 'linklist'
      }
  ])

  .return(chaptersdb.class.get('Identity'))
  .get('property')
  .call('create', [
    {
      name: 'couchId',
      type: 'string'
    }
  ]);
}

nano.db.createAsync('sessions')
  .then(function () {
    console.log('Database \'sessions\' created.');
  })
  .return(orientServer.create({
    name:    'chapters',
    type:    'graph',
    storage: 'plocal'
  }))
  .tap(function () {
    console.log('Created OrientDB graph \'chapters\'');
  })
  .return(initDatabases())
  .return(createClassProps())
  .tap(function () {
    console.log('Successfully set up databases');

    process.exit(0);
  })
  .catch(function (e) {
    console.error(e);
  });
